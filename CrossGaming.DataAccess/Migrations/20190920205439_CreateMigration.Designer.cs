// <auto-generated />
using System;
using CrossGaming.DataAccess.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrossGaming.DataAccess.Migrations
{
    [DbContext(typeof(CrossGamingContext))]
    [Migration("20190920205439_CreateMigration")]
    partial class CreateMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrossGaming.Entity.Entities.Ability", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbilityDamage");

                    b.Property<string>("AbilityName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ID");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("CrossGaming.Entity.Entities.Bot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbilityID");

                    b.Property<int>("ArmorValue");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LifeValue");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("StraightStroke");

                    b.HasKey("ID");

                    b.HasIndex("AbilityID");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("CrossGaming.Entity.Entities.Log", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbilityName");

                    b.Property<string>("BotName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Damage");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PlayerName");

                    b.HasKey("ID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("CrossGaming.Entity.Entities.Match", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BotName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PlayerName");

                    b.HasKey("ID");

                    b.ToTable("MAt");
                });

            modelBuilder.Entity("CrossGaming.Entity.Entities.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbilityID");

                    b.Property<int>("ArmorValue");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LifeValue");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("StraightStroke");

                    b.HasKey("ID");

                    b.HasIndex("AbilityID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("CrossGaming.Entity.Entities.Bot", b =>
                {
                    b.HasOne("CrossGaming.Entity.Entities.Ability", "Ability")
                        .WithMany("Bots")
                        .HasForeignKey("AbilityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrossGaming.Entity.Entities.Player", b =>
                {
                    b.HasOne("CrossGaming.Entity.Entities.Ability", "Ability")
                        .WithMany("Players")
                        .HasForeignKey("AbilityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
